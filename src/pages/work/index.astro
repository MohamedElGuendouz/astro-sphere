---
import { getCollection } from "astro:content"
import PageLayout from "@layouts/PageLayout.astro"
import TopLayout from "@layouts/TopLayout.astro"
import BottomLayout from "@layouts/BottomLayout.astro"
import { WORK } from "@consts"

const collection = await getCollection("work")
const extras = await getCollection("extra")

const renderedExtras = await Promise.all(
  extras.map(async (item) => {
    const { Content } = await item.render()
    return { ...item, Content }
  })
)

collection.sort((a, b) => new Date(b.data.dateStart).getTime() - new Date(a.data.dateStart).getTime())

const work = await Promise.all(
  collection.map(async (item) => {
    const { Content } = await item.render()
    return { ...item, Content }
  })
)

function formatWorkDate(input: Date | string) {
  if (typeof input === "string") return input

  const month = input.toLocaleDateString("en-US", {
    month: "short",
  })

  const year = new Date(input).getFullYear()
  return `${month} ${year}`
}
---

<PageLayout title={WORK.TITLE} description={WORK.DESCRIPTION}>
  <TopLayout>
    {renderedExtras.map((entry, index) => (
      <article class={`prose dark:prose-invert ${index !== 0 ? "mt-12" : ""}`}>
        <entry.Content />
      </article>
    ))}

    <div class="animate page-heading mt-16">
      {WORK.TITLE}
    </div>
  </TopLayout>

  <BottomLayout>
    <ul>
      {work.map((entry, index) => {
        const isLast = index === work.length - 1
        return (
          <li class={`animate ${!isLast ? "border-b border-black/10 dark:border-white/25" : ""} mt-4 pb-8 ${index === 0 ? "mt-0 pt-0" : ""}`}>
            <div class="text-sm uppercase mb-4">
              {formatWorkDate(entry.data.dateStart)} - {formatWorkDate(entry.data.dateEnd)}
            </div>
            <div class="text-black dark:text-white font-semibold">
              {entry.data.company}
            </div>
            <div class="text-sm font-semibold">
              {entry.data.role}
            </div>
            <article class="prose dark:prose-invert mt-4">
              <entry.Content />
            </article>

            {entry.data.projectUrls && (
              <div class="flex flex-wrap gap-2 mt-4">
                {entry.data.projectUrls.map((projectUrl: string, i: number) => (
                  <a
                    href={projectUrl}
                    class="py-2 px-4 truncate rounded text-xs md:text-sm lg:text-base border border-black/25 dark:border-white/25 hover:bg-black/5 hover:dark:bg-white/15 blend"
                  >
                    {entry.data.projectTitles[i]}
                  </a>
                ))}
              </div>
            )}
          </li>
        )
      })}
    </ul>
  </BottomLayout>
</PageLayout>
